{{>partial_header}}
package {{packageName}}

import (
	"fmt"
	"net/http"
	"strings"
    "crypto/subtle"
	"github.com/gorilla/mux"
    "encoding/json"
    "log"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

// Hostnames and Subdomains 
// Restrict the request handler to specific hostnames or subdomains
// -   r.HandleFunc("/books"{title}", BookHandler).Host("www.mybookstore.com")

// Path Prefixes and Subrouters
// Restrict the request handler to specific path prefixes.
// -   bookrouter := r.PathPrefix("/books").Subrouter()
// -   bookrouter.HandleFunc("/", AllBooks)
// -   bookrouter.HandleFunc("/{title}", GetBook)

// Schemes
// Restrict the request handler to http/https
// -   r.HandleFunc("/secure", SecureHandler).Schemes("https")
// -   r.HandleFunc("/insecure", InsecureHandler).Schemes("http")

type Routes []Route

func respondWithJSON(w http.ResponseWriter, code int, payload interface{}) {
    w.Header().Set("Content-Type", "application/json")
    w.WriteHeader(code)
    json.NewEncoder(w).Encode(payload)
}

func loggingMiddleware(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        // Do stuff here
        log.Println(r.RequestURI)
        // Call the next handler, which can be another middleware in the chain, or the final handler.
        next.ServeHTTP(w, r)
    })
}

// Define our struct
type authenticationMiddleware struct {
	tokenUsers map[string]string
}

// Initialize it somewhere
func (amw *authenticationMiddleware) Populate() {
	amw.tokenUsers["00000000"] = "user0"
	amw.tokenUsers["aaaaaaaa"] = "userA"
	amw.tokenUsers["05f717e5"] = "randomUser"
	amw.tokenUsers["deadbeef"] = "user0"
}

// Middleware function, which will be called for each request
func (amw *authenticationMiddleware) Middleware(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        token := r.Header.Get("X-Session-Token")

        if user, found := amw.tokenUsers[token]; found {
        	// We found the token in our map
        	log.Printf("Authenticated user %s\n", user)
        	// Pass down the request to the next middleware (or final handler)
        	next.ServeHTTP(w, r)
        } else {
        	// Write an error and stop the handler chain
        	http.Error(w, "Forbidden", http.StatusForbidden)
        }
    })
}

type BasicAuthMiddleware struct {
    username, password, realm string
}

func (bam *BasicAuthMiddleware) Init(user, pw, realm string) {
    bam.username = user
    bam.password = pw
    bam.realm = realm
}

func (bam *BasicAuthMiddleware) Middleware(next http.Handler) http.Handler {
   return http.HandlerFunc(
     func(w http.ResponseWriter, r *http.Request) { 
        user, pass, ok := r.BasicAuth()
        if !ok || 
            subtle.ConstantTimeCompare([]byte(user), []byte(bam.username)) != 1 || 
            subtle.ConstantTimeCompare([]byte(pass), []byte(bam.password)) != 1 {

            w.Header().Set("WWW-Authenticate", `Basic realm="`+bam.realm+`"`)
            w.WriteHeader(401)
            w.Write([]byte("user Unauthorised.\n"))
            return
        }

        log.Printf("Authenticated user %s\n", user)
        next.ServeHTTP(w,r)
        return 
     })
}

func NewRouter() *mux.Router {
    username := "apiuser"
    password := "apipass"
    realm    := "restricted"

    // "When true, if the route path is "/path/", 
    // accessing "/path" will redirect to the former and vice versa. 
    // In other words, your application will always see the path as specified in the route."
	router := mux.NewRouter().StrictSlash(true)
 
    bam := BasicAuthMiddleware{}
    bam.Init(username, password, realm)
    router.Use(bam.Middleware)

	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"{{{basePathWithoutHost}}}/",
		Index,
	},

    {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}

	Route{
		"{{operationId}}",
		strings.ToUpper("{{httpMethod}}"),
		"{{{basePathWithoutHost}}}{{{path}}}",
		{{operationId}},
	},{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
}
